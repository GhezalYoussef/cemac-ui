#!/usr/bin/env groovy

// Version du template Node : 2.0.4
// Documentation : https://docs.apps.eul.sncf.fr/construire/templates/node/

// D√©claration de la shared library build_libs
@Library('build_libs') _

// Options du build
Map options = [
    // Nombre de builds √† conserver dans l'historique des builds du job Jenkins
    NUM_TO_KEEP: 10,
    // Branche sur laquelle l'analyse qualit√©, la publication et le build Docker sont applicables
    BRANCH_DEVELOP: 'develop',
    // Version de Node
    NODE_VERSION: 'hydrogen-alpine',
    // D√©finir √† true si une image Docker applicative est √† produire
    DOCKER_BUILD: false,
    // D√©finir √† true pour des logs du build Docker plus d√©taill√©s
    IMAGE_BUILD_VERBOSE: false,
    // Type du d√©p√¥t de publication : 'generic' ou 'maven' (d√©pr√©ci√©)
    PACKAGE_TYPE: 'generic',
]

// Valorisation des options par d√©faut
options = defaultBuildOptions(options)

// Propri√©t√©s du job
properties([
    // Connexion GitLab
    gitLabConnection("${options['GITLAB_NAME']}"),
    // Conservation des N derni√®res ex√©cutions
    buildDiscarder(logRotator(numToKeepStr: "${options['NUM_TO_KEEP']}")),
    // D√©clenchement du job via webhook GitLab lors de push de nouveau code ou de cr√©ation de merge request
    pipelineTriggers([[$class: 'GitLabPushTrigger', triggerOnPush: true, triggerOnMergeRequest: true, branchFilterType: 'All']])
])

// L'analyse qualit√©, la publication des artefacts et le build Docker sont lanc√©s uniquement sur la branche de d√©veloppement
Boolean qualityAnalysisEnabled = env.BRANCH_NAME == options['BRANCH_DEVELOP']
Boolean publishEnabled = env.BRANCH_NAME == options['BRANCH_DEVELOP']
Boolean dockerEnabled = env.BRANCH_NAME == options['BRANCH_DEVELOP'] && options['DOCKER_BUILD'] == true

// Sinon, s'il est activ√©, l'horodatage des logs du CLI eul est d√©cal√© d'une heure
env.TZ = 'Europe/Paris'

// Horodatage des lignes de log Jenkins
timestamps {
    // Prise en charge des codes ANSI pour affichage de logs Jenkins coloris√©s
    ansiColor('xterm') {
        withTools([
            [name: 'node', image: 'node-web-browsers', registry: 'eul', version: "${options['NODE_VERSION']}"],
            [name: 'sonar-scanner', version: 'latest', registry: 'eul'],
            dockerEnabled ? [name: 'buildkit', image: 'moby/buildkit', version: 'rootless'] : [:],
        ]) {
            try {
                stage('Checkout') {
                    println 'üî∞ R√©cup√©ration du code source'
                    scmInfo = checkout scm
                    env.GIT_COMMIT = scmInfo.GIT_COMMIT
                    env.GIT_URL = scmInfo.GIT_URL
                    println '‚úîÔ∏è R√©cup√©ration du code source effectu√©e'
                }
                stage('Setup') {
                    container('node') {
                        println 'üî∞ Configuration du build'
                        // Le fichier package.json doit √™tre pr√©sent √† la racine du projet
                        if (!fileExists('package.json')) {
                            error '‚ùå Le fichier package.json est introuvable'
                        }
                        println 'üî∞ Extraction des informations du package.json'
                        // R√©cup√©ration de l'attribut name de package.json
                        env.NAME = sh(script: "node -p \"require('./package.json').name\"", returnStdout: true).trim()
                        // R√©cup√©ration de l'attribut version de package.json
                        env.VERSION = sh(script: "node -p \"require('./package.json').version\"", returnStdout: true).trim()
                        if (options['PACKAGE_TYPE'] == 'maven' && !env.VERSION.endsWith('-SNAPSHOT') && env.BRANCH_NAME != 'master') {
                            error "‚ùå La version doit √™tre suffix√©e par -SNAPSHOT dans le cas d'une publication au format maven : ${env.VERSION}"
                        }
                        // Dans le cas d'une publication generic, des versions suffix√©es  -alpha, -beta, -rc peuvent √™tre utilis√©es et/ou suffix√©es par le n¬∞ de build
                        println "üìú Nom extrait du package.json : ${env.NAME}"
                        println "üìú Version extraite du package.json : ${env.VERSION}"

                        // Si besoin de mettre √† jour npm dans la derni√®re version stable, d√©commenter la commande ci dessous
                        // https://docs.npmjs.com/try-the-latest-stable-version-of-npm#upgrading-on-nix-osx-linux-etc
                        // sh 'npm i -g npm@latest && npm --version'

                        // D√©sactivation des options npm non utiles en CI
                        sh 'eul npm config set audit false && npm config set fund false'
                        println '‚úîÔ∏è Configuration du build effectu√©e'
                    }
                }
                stage('Install') {
                    container('node') {
                        println 'üî∞ Installation des packages'
                        sh 'eul npm ci'
                        println '‚úîÔ∏èÔ∏è Installation des packages effectu√©e'
                    }
                }
                stage('Build') {
                    container('node') {
                        println 'üî∞ Build'
                        sh 'eul npm run build'
                        println '‚úîÔ∏èÔ∏è Build effectu√©'
                    }
                }
                stage('Tests') {
                    container('node') {
                        println 'üî∞ Ex√©cution des tests unitaires'
                        if (sh(script: 'eul npm test', returnStatus: true)) {
                            unstable '‚ö†Ô∏èÔ∏è Les tests unitaires ont √©chou√©'
                        }
                        println '‚úîÔ∏èÔ∏è Ex√©cution des tests unitaires effectu√©e'
                    }
                }
                stage('QA') {
                    when(qualityAnalysisEnabled) {
                        container('sonar-scanner') {
                            println 'üî∞ Analyse qualit√©'
                            withSonarQubeEnv('sonarqube') {
                                // Le nom de la branche est ajout√© √† la fin du nom du projet SonarQube
                                String sonarBranch = env.BRANCH_NAME?.replaceAll(/[\\]/, '_').replaceAll(/[, ]/, '')
                                String sonarProjectName = "${env.NAME} ${sonarBranch}".trim()
                                sh """\
                                    eul sonar-scanner \
                                    -Dsonar.projectKey=${options['PROJECT_SONAR_KEY_BRANCH']} \
                                    -Dsonar.projectName="${sonarProjectName}" \
                                    -Dsonar.projectVersion=${env.VERSION} \
                                    -Dsonar.links.ci=${JOB_URL} \
                                    -Dsonar.links.homepage=${GIT_URL} \
                                """
                            }
                            println '‚úîÔ∏èÔ∏è Analyse qualit√© effectu√©e'
                        }
                    }
                }
                stage('Local CVE scan') {
                    container('node') {
                        println 'üî∞ Scan de s√©curit√© local sur les artefacts produits'
                        // Scan CVE d√©clench√© avant la publication des artefacts pour ne pas publier d'artefact avec des vulnerabilit√©s
                        if (sh(script: 'eul artefacts cve-scan --local --critical --npm', returnStatus: true)) {
                            // La pr√©sence de CVE dans les artefacts est bloquante
                            error "‚ùå Le scan de CVE a identifi√© des vuln√©rabilit√©s critiques dans l'artefact ou ses d√©pendances"
                        }
                        println '‚úîÔ∏èÔ∏è Scan CVE local effectu√©'
                    }
                }
                stage('Publish') {
                    when(publishEnabled) {
                        container('node') {
                            println "üî∞ Publication des artefacts du projet dans Artifactory depuis la branche ${BRANCH_NAME}"
                            String archiveExtension = 'tar.gz'
                            String archiveFilename = "${env.NAME}-${env.VERSION}.$archiveExtension"
                            // Cr√©ation du tar.gz du dossier dist, possibilit√© d'ajouter cette √©tape dans le postbuild
                            // d√©fini dans le package.json : "postbuild": "tar -zcvf {nom_archive}.tar.gz dist/*".
                            // Pour ne pas inclure le dossier parent dist, remplacer par un "cd dist && tar -zcvf {nom_archive}.tar.gz *"
                            //  et mettre √† jour le param√®tre archiveFilename de l'appel √† eul artefacts upload (le pr√©fixer par dist/)
                            sh "tar -zcvf ${archiveFilename} dist/*"
                            // En convention maven
                            String groupId = options['GROUP_ID'].replaceAll('[.]', '/')
                            String targetLocation = "$groupId/$NAME/$VERSION/$NAME-$VERSION.$archiveExtension"
                            // Upload au format generic avec une convention maven.
                            // Avec le generic, on est libre sur le choix de la convention et donc du dossier de destination :
                            // eul artefact upload -T generic $archiveFilename a/b/c/d/e/"
                            // sans param√®tre suppl√©mentaire le d√©p√¥t de destination par d√©faut est packageType_areris_dev
                            if (sh(script: "eul artefacts upload -T ${options['PACKAGE_TYPE']} $archiveFilename $targetLocation", returnStatus: true)) {
                                error "‚ùå L'upload de l'artefact ${archiveFilename} a √©chou√©"
                            }
                            // Publication des infos de build dans artifactory
                            sh 'eul artefacts build-publish'
                            // Publication Jenkins du lien sur le build Artifactory
                            publishArtifactoryBuildLink()
                            println '‚úîÔ∏è Publication des artefacts effectu√©e'
                        }
                    }
                }
                stage('CVE scan') {
                    when(publishEnabled) {
                        container('node') {
                            println 'üî∞ Scan CVE distant sur les artefacts produits sur Artifactory'
                            // Pour des raisons de performances, l'ex√©cution du scan de build est asynchrone : le r√©sultat final du scan n'est pas attendu par le pipeline.
                            // Le lien Artifactory vers le scan de build est publi√© directement dans le job et accessible.
                            // Pour forcer le pipeline √† attendre le r√©sultat du scan de build, il faut rajouter le flag `--wait-for-result` √† la commande de scan cve comme suit:
                            // <eul artefacts cve-scan --wait-for-result>
                            // cf: https://docs.apps.eul.sncf.fr/share/securise-scan-dependances
                            if (sh(script: 'eul artefacts cve-scan', returnStatus: true)) {
                                // Si le pipeline arrive √† ce stage cela veut dire qu'il a pass√© le scan local et ne pr√©sente pas de CVE critiques mais hautes.
                                // Pour mettre la pipeline en erreur, remplacer unstable "‚ö†Ô∏è..." par error "‚ùå..." dans la ligne suivante
                                unstable "‚ö†Ô∏èÔ∏è Le scan de CVE a identifi√© des vuln√©rabilit√©s hautes dans l'artefact ou ses d√©pendances"
                            }
                            println '‚úîÔ∏è Scan CVE distant effectu√©'
                        }
                    }
                }
                stage('Docker build') {
                    when(dockerEnabled) {
                        container('buildkit') {
                            println 'üî∞ build Docker avec Buildkit'
                            String dockerVerboseOption = options['IMAGE_BUILD_VERBOSE'] ? '--debug' : ''
                            env.GROUP_ID = options['GROUP_ID'].replaceAll('[.]', '/')
                            env.IMAGE_NAME = options['PROJECT_NAME']
                            env.IMAGE_VERSION = env.VERSION
                            env.ARTEFACT_REPO_URL = "https://artefact-repo.apps.eul.sncf.fr/artifactory/${options['PACKAGE_TYPE']}_${env.EUL_ARESIS}"
                            result = sh(
                                returnStatus: true,
                                script: """
                                    eul image $dockerVerboseOption build docker/nginx \
                                        --tag=$IMAGE_NAME:$IMAGE_VERSION \
                                        --build-arg 'ARTEFACT_REPO_URL=$ARTEFACT_REPO_URL' \
                                        --build-arg 'GROUP_ID=$GROUP_ID' \
                                        --build-arg 'IMAGE_NAME=$IMAGE_NAME' \
                                        --build-arg 'VERSION=$IMAGE_VERSION' \
                                    """)
                            if (result != 0) {
                                error '‚ùå Le build Docker avec BuildKit a √©chou√©'
                            }
                            println '‚úîÔ∏è build Docker effectu√©'
                        }
                    }
                }
                stage('Docker CVE scan') {
                    when(dockerEnabled) {
                        container('buildkit') {
                            println 'üî∞ Scan CVE distant sur l\'image docker produite'
                            // L'√©xecution du scan docker est synchrone. C'est √† dire, le r√©sultat final du scan est attendu par le pipeline.
                            // Pour forcer le pipeline √† ne pas attendre le r√©sultat du scan docker, il faut enlever le flag `--wait-for-result` √† la commande de scan comme suit:
                            // <eul image scan>
                            // cf: https://docs.apps.eul.sncf.fr/share/scan-conteneur
                            result = sh(script: "eul image scan $IMAGE_NAME:$IMAGE_VERSION --wait-for-result", returnStatus: true)
                            if (result > 0) {
                                if (result == 4) {
                                    // La pr√©sence de CVE critiques dans l'image docker n'est pas bloquante.
                                    // Pour mettre le pipeline en erreur, remplacer unstable "‚ö†Ô∏è..." par error "‚ùå..." dans la ligne suivante.
                                    unstable "‚ö†Ô∏èÔ∏è Le scan CVE distant Docker a identifi√© des vuln√©rabilit√©s critiques dans l'image produite"
                                } else {
                                    error '‚ùå Le Scan CVE distant Docker a √©chou√©'
                                }
                            }

                            println '‚úîÔ∏è Scan CVE distant sur l\'image docker produite effectu√©'
                        }
                    }
                }

                updateGitlabCommitStatus name: 'build', state: 'success'
                println 'üëç Build du job de snapshot termin√© avec succ√®s'
                currentBuild.result = 'SUCCESS'
            } catch (all) {
                currentBuild.result = 'FAILURE'
                updateGitlabCommitStatus name: 'build', state: 'failed'
                // Envoi d'un mail en cas d'√©chec
                emailext(
                    body: '$DEFAULT_CONTENT',
                    subject: '$DEFAULT_SUBJECT',
                    // Destinataires : auteurs d'une modification du code et d√©clencheur du pipeline
                    recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']],
                    // Pour √©galement envoyer le mail √† une liste d'adresses (s√©par√©es par des ,) :
                    //to: "adressmail1, adressmail2"
                )
                throw all
            }
            finally {
                // Collecte et remont√©e dans Jenkins des probl√®mes rencontr√©s pendant le build
                addNgIssuesReportToJob('tools': ['cveScan', 'npm', 'taskScanner'])
                // Pour le suivi et les indicateurs eUL
                eulNotify()
            }
        }
    }
}
