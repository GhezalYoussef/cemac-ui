server {
    listen       8080;
    server_name  localhost;

    #access_log  /var/log/nginx/host.access.log  main;

    root   /usr/share/nginx/html;
    index  index.html index.htm;

    # Cache de ressources statiques (longue durée)
    location ~* .(css|js|woff2)$ {
      expires 1y;
      add_header Cache-Control "public, no-transform";
    }

    # Cache des images (courte durée)
    location ~* .(?:jpg|jpeg|gif|png|ico|xml|webp)$ {
      expires 7d;
      add_header Cache-Control "public, no-transform";
    }

    # Bloc à configurer lorsque NGINX est utilisé comme reverse proxy 
    # pour accéder au backend
    #location ~ ^/(api|oauth2|login)/ {
    #  proxy_pass http://localhost:8081;
    #}

    location / {
      # Ajout de l'entête 'Content-Security-Policy'
      # Le 'nonce' correspond à la variable $request_id de NGINX
      set $CSP_DEFAULT "default-src 'self'";
      set $CSP_SCRIPT "script-src 'self' 'nonce-${request_id}'";
      set $CSP_STYLE "style-src 'self' 'nonce-${request_id}'";
      set $CSP_IMAGE "img-src 'self' data:";
      add_header Content-Security-Policy "${CSP_DEFAULT}; ${CSP_SCRIPT}; ${CSP_STYLE}; ${CSP_IMAGE}";

      # Ajout de l'entête 'X-XSS-Protection'
      add_header X-XSS-Protection "1; mode=block";

      # Remplace 'random_nonce_value' par la valeur unique $request_id, pour chaque requête
      # -> autorise Angular à injecter des tags <script> et <style> au runtime
      sub_filter_once off;
      sub_filter random_nonce_value $request_id;

      # Redirection des routes Angular vers la page index.html
      try_files $uri $uri/ /index.html;

      # Cache-Control
      add_header Cache-Control "no-store, no-cache, must-revalidate";
    }

    location /nginx_status/ {
      return 200 'ok';
      add_header Content-Type text/plain;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}