#!/usr/bin/env groovy

// Version du template Node : 2.0.4
// Documentation : https://docs.apps.eul.sncf.fr/construire/templates/node/

// D√©claration de la shared library build_libs
@Library('build_libs') _

// Options du build
Map options = [
    // Nombre de builds √† conserver dans l'historique des builds du job Jenkins
    NUM_TO_KEEP : 10,
    // Version de Node
    NODE_VERSION: 'hydrogen-alpine',
    // D√©finir √† true si une image Docker applicative est √† produire
    DOCKER_BUILD: false,
    // D√©finir √† true pour des logs du build Docker plus d√©taill√©s
    IMAGE_BUILD_VERBOSE: false,
    // Type du d√©p√¥t de publication : 'generic' ou 'maven' (d√©pr√©ci√©)
    PACKAGE_TYPE: 'generic',
]

// Valorisation des options par d√©faut
options = defaultBuildOptions(options)

// Propri√©t√©s du job
properties([
    // Connexion GitLab
    gitLabConnection("${options['GITLAB_NAME']}"),
    // Conservation des N derni√®res ex√©cutions
    buildDiscarder(logRotator(numToKeepStr: "${options['NUM_TO_KEEP']}")),
    // Param√®tres du build de release. Les valeurs du build pr√©c√©dent sont prises comme valeurs par d√©faut
    parameters([
        string(name: 'BRANCH_RELEASE', defaultValue: "${params['BRANCH_RELEASE']}", description: 'nom de la branche √† releaser', trim: true),
        string(name: 'RELEASE_VERSION', defaultValue: "${params['RELEASE_VERSION']}", description: 'version de la release √† construire (format : X.Y.Z)', trim: true),
        string(name: 'DEVELOPMENT_VERSION', defaultValue: "${params['DEVELOPMENT_VERSION']}", description: 'prochaine version de d√©veloppement (format : X.Y.Z)', trim: true),
        choice(name: 'REPO_DEPLOY_RELEASE', choices: ['prod', 'dev'], description: 'r√©pertoire de destination des artefacts de release (dev ou prod)'),
    ])
])

// Tous les param√®tres du build de release doivent √™tre renseign√©s
params.each { param ->
    if (!param.value) {
        error "‚ùå Le param√®tre ${param.key} doit √™tre renseign√©"
    }
}

// Cible 'dev' ou 'prod' de la release, qui d√©termine le d√©p√¥t de publication
String targetRepositoryType = params.REPO_DEPLOY_RELEASE
Boolean targetingProd = targetRepositoryType == 'prod'

// Le build Docker est lanc√© uniquement si l'option correspondante est activ√©e
Boolean dockerEnabled = options['DOCKER_BUILD'] == true

// Le nom du build Jenkins prend le nom de la version √† releaser
currentBuild.displayName = "${RELEASE_VERSION} - ${targetRepositoryType}"

// Sinon, s'il est activ√©, l'horodatage des logs du CLI eul est d√©cal√© d'une heure
env.TZ = 'Europe/Paris'

// Horodatage des lignes de log Jenkins
timestamps {
    // Prise en charge des codes ANSI pour affichage de logs Jenkins coloris√©s
    ansiColor('xterm') {
        withTools([
            [name: 'node', image: 'node-web-browsers', registry: 'eul', version: "${options['NODE_VERSION']}"],
            [name: 'sonar-scanner', version: 'latest', registry: 'eul'],
            dockerEnabled ? [name: 'buildkit', image: 'moby/buildkit', version: 'rootless'] : [:],
        ]) {
            try {
                stage('Checkout') {
                    println 'üî∞ R√©cup√©ration du code source'
                    scmInfo = checkout scm
                    env.GIT_URL = scmInfo.GIT_URL
                    env.GIT_COMMIT = scmInfo.GIT_COMMIT
                    env.GIT_SHORT_URL = "${env.GIT_URL}".replace('https://', '')
                    println '‚úîÔ∏è R√©cup√©ration du code source effectu√©e'
                }
                stage('Setup') {
                    container('node') {
                        println 'üî∞ Configuration du build'
                        // V√©rification de l'unicit√© du tag quand la cible de publication est le d√©p√¥t de production
                        if (RELEASE_VERSION == sh(script: 'git tag -l $RELEASE_VERSION', returnStdout: true).trim()) {
                            if (targetingProd) {
                                error "‚ùå Le tag ${RELEASE_VERSION} existe d√©j√†"
                            }
                            env.TAG_ALREADY_EXISTS = true
                            // Suppression du tag, s'il existe
                            sh 'git tag -d $RELEASE_VERSION'
                            println "üìú Le tag existant $RELEASE_VERSION sera remplac√© en fin de release"
                        } else {
                            env.TAG_ALREADY_EXISTS = false
                            println "üìú Le tag $RELEASE_VERSION n'existe pas. Il sera pos√© en fin de release"
                        }

                        // Le fichier package.json doit √™tre pr√©sent √† la racine du projet
                        if (!fileExists('package.json')) {
                            error '‚ùå Le fichier package.json est introuvable'
                        }
                        println 'üî∞ Extraction des informations du package.json'
                        // Le nom du projet est sp√©cifi√© dans l'attribut name du fichier package.json
                        env.NAME = sh(script: "node -p \"require('./package.json').name\"", returnStdout: true).trim()
                        println "üìú Nom extrait du package.json : ${env.NAME}"

                        // Si besoin de mettre √† jour npm dans la derni√®re version stable d√©commenter la commande ci dessous
                        // https://docs.npmjs.com/try-the-latest-stable-version-of-npm#upgrading-on-nix-osx-linux-etc
                        // sh "npm i -g npm@latest && npm --version"

                        // D√©sactivation des options npm non utiles en CI
                        sh 'eul npm config set audit false && npm config set fund false'

                        println 'üî∞ Mise √† jour de la version'
                        sh 'git config --global user.email pic-eul@sncf.com'
                        sh 'git config --global user.name "PIC e.UL"'
                        // Option pour ne pas ajouter un v devant la version dans le tag
                        sh "npm config set tag-version-prefix=''"
                        if (targetingProd) {
                            sh 'eul npm version $RELEASE_VERSION'
                        } else {
                            sh 'eul npm version $RELEASE_VERSION --allow-same-version'
                        }
                        println '‚úîÔ∏è Configuration du build effectu√©e'
                    }
                }
                stage('Install') {
                    container('node') {
                        println 'üî∞ Installation des packages'
                        sh 'eul npm ci'
                        println '‚úîÔ∏èÔ∏è Installation des packages effectu√©e'
                    }
                }
                stage('Build') {
                    container('node') {
                        println 'üî∞ Build'
                        sh 'eul npm run build'
                        println '‚úîÔ∏è Build effectu√©'
                    }
                }
                stage('Tests') {
                    container('node') {
                        println 'üî∞ Ex√©cution des tests unitaires'
                        if (sh(script: 'eul npm test', returnStatus: true)) {
                            error '‚ùå Release annul√©e. Les tests unitaires ont √©chou√©'
                        }
                        println '‚úîÔ∏è Ex√©cution des tests unitaires effectu√©e'
                    }
                }
                stage('Quality gate') {
                    container('sonar-scanner') {
                        println 'üî∞ Analyse qualit√© avec barri√®re qualit√©'
                        withSonarQubeEnv('sonarqube') {
                            sh """\
                                eul sonar-scanner \
                                -Dsonar.projectKey=${options['PROJECT_SONAR_KEY']} \
                                -Dsonar.projectName="${env.NAME}" \
                                -Dsonar.projectVersion=${RELEASE_VERSION} \
                                -Dsonar.links.ci=${JOB_URL} \
                                -Dsonar.links.homepage=${GIT_URL} \
                            """
                        }
                        // Contr√¥le du passage de la barri√®re qualit√© SonarQube
                        timeout(time: 1, unit: 'HOURS') {
                            if (waitForQualityGate()?.status != 'OK') {
                                error "‚ùå Release annul√©e. Le projet n'a pas pass√© la barri√®re qualit√©"
                            }
                        }
                        println '‚úîÔ∏è Analyse qualit√© effectu√©e. Le projet a pass√© la barri√®re qualit√©'
                    }
                }
                stage('Local CVE scan') {
                    container('node') {
                        println 'üî∞ Scan de s√©curit√© local sur les artefacts produits'
                        // Scan CVE d√©clench√© au plus t√¥t pour stopper le release dans le cas o√π des CVE critiques sont pr√©sentes dans les d√©pendances projet
                        if (sh(script: 'eul artefacts cve-scan --local --critical --npm', returnStatus: true)) {
                            // La pr√©sence de cve dans les artefacts est bloquante en release
                            error "‚ùå Release annul√©e. Le scan de CVE a identifi√© des vuln√©rabilit√©s critiques dans l'artefact ou ses d√©pendances"
                        }
                        println '‚úîÔ∏èÔ∏è Scan CVE local effectu√©'
                    }
                }
                stage('Release') {
                    container('node') {
                        println 'üî∞ Publication des artefacts du projet dans Artifactory'
                        String archiveExtension = 'tar.gz'
                        String archiveFilename = "${env.NAME}-${RELEASE_VERSION}.$archiveExtension"
                        // Cr√©ation du tar.gz du dossier dist, possibilit√© d'ajouter cette √©tape dans le postbuild
                        // d√©fini dans le package.json : "postbuild": "tar -zcvf {nom_archive}.tar.gz dist/*".
                        // Pour ne pas inclure le dossier parent dist, remplacer par un "cd dist && tar -zcvf {nom_archive}.tar.gz *"
                        //  et mettre √† jour le param√®tre archiveFilename de l'appel √† eul artefacts upload (le pr√©fixer par dist/)
                        sh "tar -zcvf ${archiveFilename} dist/*"
                        // En convention maven
                        String groupId = options['GROUP_ID'].replaceAll('\\.', '/')
                        String targetLocation = "$groupId/$NAME/$RELEASE_VERSION/$NAME-$RELEASE_VERSION.$archiveExtension"
                        // Upload au format generic avec une convention maven.
                        // Avec le generic, on est libre sur le choix de la convention et donc du dossier de destination :
                        // (Attention le d√©p√¥t de prod est immutable)
                        // eul artefact --repo-target prod upload -T generic $archiveFilename a/b/c/d/e/"
                        if (sh(script: "eul --repo-target ${targetRepositoryType} artefacts upload -T ${options['PACKAGE_TYPE']} $archiveFilename $targetLocation", returnStatus: true)) {
                            error "‚ùå Release annul√©e. L'upload de l'artefact ${archiveFilename} a √©chou√©"
                        }
                        // Publication du build-info dans Artifactory
                        sh 'eul artefacts build-publish'
                        // Publication Jenkins du lien sur le build Artifactory
                        publishArtifactoryBuildLink()
                        println '‚úîÔ∏è Publication des artefacts effectu√©e'
                        // Mise √† jour de la version de d√©veloppement
                        sh 'eul npm version $DEVELOPMENT_VERSION --no-git-tag-version'
                        println "üî∞ Push des modifications avec publication du tag ${RELEASE_VERSION}"
                        // ‚ö†Ô∏è Dans le cas d'une release sur le d√©p√¥t de dev (non immutable), si le tag existe d√©j√† alors il est d√©plac√©,
                        // il faut dans ce cas utiliser l'option -f sur le push du tag
                        env.GIT_PUSH_TAG_OPTS = env.TAG_ALREADY_EXISTS?.toBoolean() ? '-f' : ''
                        sh '''
                            git add package.json package-lock.json
                            git commit -m "prepare the next development version : $DEVELOPMENT_VERSION"
                            git push https://${gitlab_user}:${gitlab_pass}@$GIT_SHORT_URL $BRANCH_RELEASE
                            git push ${GIT_PUSH_TAG_OPTS} https://${gitlab_user}:${gitlab_pass}@$GIT_SHORT_URL refs/tags/$RELEASE_VERSION
                        '''
                        println "‚úîÔ∏è Release de ${RELEASE_VERSION} effectu√©e"
                    }
                }
                stage('CVE scan') {
                    container('node') {
                        println 'üî∞ Scan de s√©curit√© distant sur les artefacts produits sur Artifactory'
                        // Par d√©faut, le scan de build est synchrone pour le pipeline de release. Le r√©sultat final du scan sera attendu par le pipeline.
                        // Pour forcer le pipeline √† ne pas attendre le r√©sultat du scan de build, il faut enlever le flag `--wait-for-result` √† la commande de scan cve.
                        // cf: https://docs.apps.eul.sncf.fr/share/securise-scan-dependances
                        if (sh(script: 'eul artefacts cve-scan --wait-for-result', returnStatus: true)) {
                            // Si le pipeline arrive √† ce stage cela veut dire qu'il a pass√© le scan local et ne pr√©sente pas de CVE critiques mais hautes.
                            // Pour mettre la pipeline en erreur, remplacer unstable "‚ö†Ô∏è..." par error "‚ùå..." dans la ligne suivante
                            unstable "‚ö†Ô∏èÔ∏è Le scan de CVE a identifi√© des vuln√©rabilit√©s hautes dans l'artefact ou ses d√©pendances"
                        }
                        println '‚úîÔ∏èÔ∏è Scan CVE distant effectu√©'
                    }
                }
                stage('Docker build') {
                    when(dockerEnabled) {
                        container('buildkit') {
                            println 'üî∞ build Docker avec Buildkit'
                            String dockerVerboseOption = options['IMAGE_BUILD_VERBOSE'] ? '--debug' : ''
                            env.GROUP_ID = options['GROUP_ID'].replaceAll('\\.', '/')
                            env.IMAGE_NAME = options['PROJECT_NAME']
                            env.IMAGE_VERSION = "${RELEASE_VERSION}"
                            env.ARTEFACT_REPO_URL = "https://artefact-repo.apps.eul.sncf.fr/artifactory/${options['PACKAGE_TYPE']}_${env.EUL_ARESIS}"
                            result = sh(
                                returnStatus: true, 
                                script: """
                                    eul --repo-target ${targetRepositoryType} image $dockerVerboseOption build docker/nginx \
                                        --tag=$IMAGE_NAME:$IMAGE_VERSION \
                                        --build-arg 'ARTEFACT_REPO_URL=$ARTEFACT_REPO_URL' \
                                        --build-arg 'GROUP_ID=$GROUP_ID' \
                                        --build-arg 'IMAGE_NAME=$IMAGE_NAME' \
                                        --build-arg 'VERSION=$IMAGE_VERSION' \
                                    """)
                            if (result != 0) {
                                error '‚ùå Le build Docker avec BuildKit a √©chou√©'
                            }
                            println '‚úîÔ∏è build Docker effectu√©'
                        }
                    }
                }
                stage('Docker CVE scan') {
                    when(dockerEnabled) {
                        container('buildkit') {
                            println 'üî∞ Scan CVE distant sur l\'image docker produite'
                            // Par d√©faut, le scan docker est synchrone pour le pipeline de release. Le r√©sultat final du scan sera attendu par le pipeline.
                            // Pour forcer le pipeline √† ne pas attendre le r√©sultat du scan docker, il faut enlever le flag `--wait-for-result` √† la commande de scan cve.
                            // cf: https://docs.apps.eul.sncf.fr/share/scan-conteneur
                            result = sh(script: "eul --repo-target ${targetRepositoryType} image scan $IMAGE_NAME:$IMAGE_VERSION --wait-for-result", returnStatus: true)
                            if (result > 0) {
                                if (result == 4) {
                                    // La pr√©sence de CVE critiques dans l'image docker n'est pas bloquante.
                                    // Pour mettre le pipeline en erreur, remplacer unstable "‚ö†Ô∏è..." par error "‚ùå..." dans la ligne suivante.
                                    unstable "‚ö†Ô∏è Le scan CVE distant Docker a identifi√© des vuln√©rabilit√©s critiques dans l'image produite"
                                } else {
                                    error '‚ùå Le Scan CVE distant Docker a √©chou√©'
                                }
                            }

                            println '‚úîÔ∏è Scan CVE distant sur l\'image docker produite effectu√©'
                        }
                    }
                }

                println 'üëç Build du job de release termin√© avec succ√®s'
                currentBuild.result = 'SUCCESS'
            } catch (all) {
                currentBuild.result = 'FAILURE'
                // Envoi d'un mail en cas d'√©chec
                emailext(
                    body: '$DEFAULT_CONTENT',
                    subject: '$DEFAULT_SUBJECT',
                    // Destinataires : auteurs d'une modification du code et d√©clencheur du pipeline
                    recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']],
                    // Pour √©galement envoyer le mail √† une liste d'adresses (s√©par√©es par des ,) :
                    //to: "adressmail1, adressmail2"
                )
                throw all
            }
            finally {
                // Collecte et remont√©e dans Jenkins des probl√®mes rencontr√©s pendant le build
                addNgIssuesReportToJob('tools': ['cveScan', 'npm', 'taskScanner'])
                // Pour le suivi et les indicateurs eUL
                eulNotify()
            }
        }
    }
}
